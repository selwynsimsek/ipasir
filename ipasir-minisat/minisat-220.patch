diff -ruN minisat-220/minisat/core/Solver.cc minisat-220.new/minisat/core/Solver.cc
--- minisat-220/minisat/core/Solver.cc	2020-03-24 12:29:37.000000000 +0100
+++ minisat-220.new/minisat/core/Solver.cc	2020-03-29 14:18:40.000000000 +0200
@@ -53,9 +53,10 @@
 
 Solver::Solver() :
 
+    termCallback (NULL), learnCallbackBuffer (NULL), learnCallback (NULL)
     // Parameters (user settable):
     //
-    verbosity        (0)
+  , verbosity        (0)
   , var_decay        (opt_var_decay)
   , clause_decay     (opt_clause_decay)
   , random_var_freq  (opt_random_var_freq)
@@ -106,6 +107,7 @@
 
 Solver::~Solver()
 {
+  free(this->learnCallbackBuffer);
 }
 
 
@@ -717,6 +719,16 @@
             learnt_clause.clear();
             analyze(confl, learnt_clause, backtrack_level);
             cancelUntil(backtrack_level);
+            
+
+            if (learnCallback != 0 && learnt_clause.size() <= learnCallbackLimit) {
+              for (int i = 0; i < learnt_clause.size(); i++) {
+                Lit lit = learnt_clause[i];
+                learnCallbackBuffer[i] = sign(lit) ? -(var(lit)+1) : (var(lit)+1);
+              }
+              learnCallbackBuffer[learnt_clause.size()] = 0;
+              learnCallback(learnCallbackState, learnCallbackBuffer);
+            }
 
             if (learnt_clause.size() == 1){
                 uncheckedEnqueue(learnt_clause[0]);
diff -ruN minisat-220/minisat/core/Solver.h minisat-220.new/minisat/core/Solver.h
--- minisat-220/minisat/core/Solver.h	2020-03-24 12:29:37.000000000 +0100
+++ minisat-220.new/minisat/core/Solver.h	2020-03-29 14:18:40.000000000 +0200
@@ -37,6 +37,24 @@
 class Solver {
 public:
 
+    void* termCallbackState;
+    int (*termCallback)(void* state);
+    void setTermCallback(void* state, int (*termCallback)(void*)) {
+      this->termCallbackState = state;
+      this->termCallback = termCallback;
+    }
+
+    void* learnCallbackState;
+    int* learnCallbackBuffer;
+    int learnCallbackLimit;
+    void (*learnCallback)(void * state, int * clause);
+    void setLearnCallback(void * state, int maxLength, void (*learn)(void * state, int * clause)) {
+      this->learnCallbackState = state;
+      this->learnCallbackLimit = maxLength;
+      this->learnCallbackBuffer = (int*) realloc (this->learnCallbackBuffer, (1+maxLength)*sizeof(int));
+      this->learnCallback = learn;
+    }
+
     // Constructor/Destructor:
     //
     Solver();
@@ -372,7 +390,7 @@
 inline void     Solver::clearInterrupt(){ asynch_interrupt = false; }
 inline void     Solver::budgetOff(){ conflict_budget = propagation_budget = -1; }
 inline bool     Solver::withinBudget() const {
-    return !asynch_interrupt &&
+    return !asynch_interrupt && (termCallback == NULL || 0 == termCallback(termCallbackState)) &&
            (conflict_budget    < 0 || conflicts < (uint64_t)conflict_budget) &&
            (propagation_budget < 0 || propagations < (uint64_t)propagation_budget); }
 
